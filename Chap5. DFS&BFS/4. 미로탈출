/* BFS알고리즘을 이용한 최단경로 문제 */

from collections import deque
#1. 먼저 n,m을 입력 받고, 미로 판을 만들자!
n, m = map(int, input().split())

graph=[]
for i in range(n):
  graph.append(list(map(int,input()))) #2차원 그래프(미로판 만들기) 완성!

#상,하,좌,우를 기준으로 이동할 네 방향
dx=[-1,1,0,0]
dy=[0,0,-1,1]

#bfs알고리즘 적용
def bfs(x,y):
  #deque라이브러리 사용
  queue = deque() #큐 생성
  queue.append((x,y)) #큐에 x,y로 이루어진 튜플 데이터 추가

  while queue:
    #큐가 빌 때까지 반복할때마다 큐에서 하나의 원소를 꺼냄
    x,y=queue.popleft()
    ## 현재 위체에서 네 방향으로 위치 확인 
    for i in range(4):
      # 인접한 노드의 위치
      nx= x + dx[i]  
      ny= y + dy[i]
      #미로 찾기 공간을 벗어난 경우는 무시
      if nx<0 or ny<0 or nx>=n or ny>=m:
        continue
      #괴물이 있는 곳==0 인 곳은 가지 않기!
      elif graph[nx][ny]==0:
        continue
      #괴물이 없는 곳==1인 곳은 전진하여 값을 1로 증가시켜서 방문 흔적 남기기(재탐색X)
      elif graph[nx][ny]==1:
        #바로 직전 노드인 graph[x][y]에 1을 더해서 현재 노드에 값을 증가시킴
        graph[nx][ny]=graph[x][y]+1
        #큐에 현재 노드 정보를 추가
        queue.append((nx,ny))

  #출구에서의 최단경로 
  return graph[n-1][m-1]

